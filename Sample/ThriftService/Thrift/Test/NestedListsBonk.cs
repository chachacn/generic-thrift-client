/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.Test
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NestedListsBonk : TBase
  {
    private List<List<List<Bonk>>> _bonk;

    public List<List<List<Bonk>>> Bonk
    {
      get
      {
        return _bonk;
      }
      set
      {
        __isset.bonk = true;
        this._bonk = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bonk;
    }

    public NestedListsBonk() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Bonk = new List<List<List<Bonk>>>();
                  TList _list137 = iprot.ReadListBegin();
                  for( int _i138 = 0; _i138 < _list137.Count; ++_i138)
                  {
                    List<List<Bonk>> _elem139;
                    {
                      _elem139 = new List<List<Bonk>>();
                      TList _list140 = iprot.ReadListBegin();
                      for( int _i141 = 0; _i141 < _list140.Count; ++_i141)
                      {
                        List<Bonk> _elem142;
                        {
                          _elem142 = new List<Bonk>();
                          TList _list143 = iprot.ReadListBegin();
                          for( int _i144 = 0; _i144 < _list143.Count; ++_i144)
                          {
                            Bonk _elem145;
                            _elem145 = new Bonk();
                            _elem145.Read(iprot);
                            _elem142.Add(_elem145);
                          }
                          iprot.ReadListEnd();
                        }
                        _elem139.Add(_elem142);
                      }
                      iprot.ReadListEnd();
                    }
                    Bonk.Add(_elem139);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NestedListsBonk");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Bonk != null && __isset.bonk) {
          field.Name = "bonk";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Bonk.Count));
            foreach (List<List<Bonk>> _iter146 in Bonk)
            {
              {
                oprot.WriteListBegin(new TList(TType.List, _iter146.Count));
                foreach (List<Bonk> _iter147 in _iter146)
                {
                  {
                    oprot.WriteListBegin(new TList(TType.Struct, _iter147.Count));
                    foreach (Bonk _iter148 in _iter147)
                    {
                      _iter148.Write(oprot);
                    }
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NestedListsBonk(");
      bool __first = true;
      if (Bonk != null && __isset.bonk) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bonk: ");
        __sb.Append(Bonk);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
