/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.Test
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SomeUnion : TBase
  {
    private Dictionary<Numberz, long> _map_thing;
    private string _string_thing;
    private int _i32_thing;
    private Xtruct3 _xtruct_thing;
    private Insanity _insanity_thing;

    public Dictionary<Numberz, long> Map_thing
    {
      get
      {
        return _map_thing;
      }
      set
      {
        __isset.map_thing = true;
        this._map_thing = value;
      }
    }

    public string String_thing
    {
      get
      {
        return _string_thing;
      }
      set
      {
        __isset.string_thing = true;
        this._string_thing = value;
      }
    }

    public int I32_thing
    {
      get
      {
        return _i32_thing;
      }
      set
      {
        __isset.i32_thing = true;
        this._i32_thing = value;
      }
    }

    public Xtruct3 Xtruct_thing
    {
      get
      {
        return _xtruct_thing;
      }
      set
      {
        __isset.xtruct_thing = true;
        this._xtruct_thing = value;
      }
    }

    public Insanity Insanity_thing
    {
      get
      {
        return _insanity_thing;
      }
      set
      {
        __isset.insanity_thing = true;
        this._insanity_thing = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool map_thing;
      public bool string_thing;
      public bool i32_thing;
      public bool xtruct_thing;
      public bool insanity_thing;
    }

    public SomeUnion() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  Map_thing = new Dictionary<Numberz, long>();
                  TMap _map44 = iprot.ReadMapBegin();
                  for( int _i45 = 0; _i45 < _map44.Count; ++_i45)
                  {
                    Numberz _key46;
                    long _val47;
                    _key46 = (Numberz)iprot.ReadI32();
                    _val47 = iprot.ReadI64();
                    Map_thing[_key46] = _val47;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                String_thing = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                I32_thing = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Xtruct_thing = new Xtruct3();
                Xtruct_thing.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                Insanity_thing = new Insanity();
                Insanity_thing.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SomeUnion");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Map_thing != null && __isset.map_thing) {
          field.Name = "map_thing";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.I64, Map_thing.Count));
            foreach (Numberz _iter48 in Map_thing.Keys)
            {
              oprot.WriteI32((int)_iter48);
              oprot.WriteI64(Map_thing[_iter48]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (String_thing != null && __isset.string_thing) {
          field.Name = "string_thing";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(String_thing);
          oprot.WriteFieldEnd();
        }
        if (__isset.i32_thing) {
          field.Name = "i32_thing";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(I32_thing);
          oprot.WriteFieldEnd();
        }
        if (Xtruct_thing != null && __isset.xtruct_thing) {
          field.Name = "xtruct_thing";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Xtruct_thing.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Insanity_thing != null && __isset.insanity_thing) {
          field.Name = "insanity_thing";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          Insanity_thing.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SomeUnion(");
      bool __first = true;
      if (Map_thing != null && __isset.map_thing) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Map_thing: ");
        __sb.Append(Map_thing);
      }
      if (String_thing != null && __isset.string_thing) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("String_thing: ");
        __sb.Append(String_thing);
      }
      if (__isset.i32_thing) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("I32_thing: ");
        __sb.Append(I32_thing);
      }
      if (Xtruct_thing != null && __isset.xtruct_thing) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Xtruct_thing: ");
        __sb.Append(Xtruct_thing== null ? "<null>" : Xtruct_thing.ToString());
      }
      if (Insanity_thing != null && __isset.insanity_thing) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Insanity_thing: ");
        __sb.Append(Insanity_thing== null ? "<null>" : Insanity_thing.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
