/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Thrift.Test
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NestedListsI32x2 : TBase
  {
    private List<List<int>> _integerlist;

    public List<List<int>> Integerlist
    {
      get
      {
        return _integerlist;
      }
      set
      {
        __isset.integerlist = true;
        this._integerlist = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool integerlist;
    }

    public NestedListsI32x2() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Integerlist = new List<List<int>>();
                  TList _list83 = iprot.ReadListBegin();
                  for( int _i84 = 0; _i84 < _list83.Count; ++_i84)
                  {
                    List<int> _elem85;
                    {
                      _elem85 = new List<int>();
                      TList _list86 = iprot.ReadListBegin();
                      for( int _i87 = 0; _i87 < _list86.Count; ++_i87)
                      {
                        int _elem88;
                        _elem88 = iprot.ReadI32();
                        _elem85.Add(_elem88);
                      }
                      iprot.ReadListEnd();
                    }
                    Integerlist.Add(_elem85);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NestedListsI32x2");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Integerlist != null && __isset.integerlist) {
          field.Name = "integerlist";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.List, Integerlist.Count));
            foreach (List<int> _iter89 in Integerlist)
            {
              {
                oprot.WriteListBegin(new TList(TType.I32, _iter89.Count));
                foreach (int _iter90 in _iter89)
                {
                  oprot.WriteI32(_iter90);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NestedListsI32x2(");
      bool __first = true;
      if (Integerlist != null && __isset.integerlist) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Integerlist: ");
        __sb.Append(Integerlist);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
